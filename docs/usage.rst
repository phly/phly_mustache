Installation 
============

via Composer
------------

1. Create a new file called composer.json and paste the following into it:	

.. code-block:: php
    {
        "require": {
            "phly/mustache": "1.2.*"
        }
    }

If you already have a composer.json file, just add this line to it.

2. Get composer if you don't have it on your system from 
`http://getcomposer.org <http://getcomposer.org>`_

.. code-block:: bash
    php composer.phar install

3. Usage

Once Composer has downloaded the component(s), all you need to do is 
include the vendor/autoload.php file that was generated by Composer. 
This file takes care of autoloading all of the libraries so that you can use them immediately:

.. code-block:: php
    require_once 'pathto/vendor/autoload.php';

    $mustache = new \Phly\Mustache\Mustache();
    echo $mustache->render('Hello, {{name}}!', array('name' => 'Hari K T'));

Via a PSR-0 autoloader
----------------------

``phly_mustache`` follows the `PSR-0 <https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md>`_
standard for class naming conventions, meaning any PSR-0-compliant class
loader will work.

Refer to the docs of the autoloader you are using.

Examples are 

`Aura.Autoload <https://github.com/auraphp/Aura.Autoload>`_
`Classloader <https://github.com/symfony/Classloader>`_
`ZendLoader <https://github.com/zendframework/Component_ZendLoader>`_

In built loader
---------------
To simplify things out of the box, the component
contains an ``_autoload.php`` file which will register an autoloader for
the ``phly_mustache`` component with ``spl_autoload``. You can simply
include that file, and start using ``Phly\Mustache``.

Instantiation
-------------

Usage is fairly straightforward:

.. code-block:: php

    include '/path/to/library/Phly/Mustache/_autoload.php';
    $mustache = new Phly\Mustache\Mustache();

Usage
=====

.. code-block:: php
    $mustache = new Phly\Mustache\Mustache();
    echo $mustache->render('name-of-template', 'view');

By default, ``phly_mustache`` will look under the current directory for
templates ending with ``.mustache``; you can create a stack of
directories to search by using the setTemplatePath() method:

.. code-block:: php

    $mustache->setTemplatePath($path1)
             ->setTemplatePath($path2);

In the above, it will search first $path2, then $path1 to resolve the template.

You may also change the suffix it will use to resolve templates:

.. code-block:: php

    $mustache = new Mustache();
    $mustache->setSuffix('mst'); // now looks for files ending in ".mst"

